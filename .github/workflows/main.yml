name: Playwright Test Automation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [3.9]
        browser: [chromium]
      fail-fast: false

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-xdist behave-html-formatter

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libatk1.0-0 \
          libc6 \
          libcairo2 \
          libcups2 \
          libdbus-1-3 \
          libexpat1 \
          libfontconfig1 \
          libgdk-pixbuf2.0-0 \
          libglib2.0-0 \
          libgtk-3-0 \
          libnspr4 \
          libpango-1.0-0 \
          libpangocairo-1.0-0 \
          libstdc++6 \
          libx11-6 \
          libx11-xcb1 \
          libxcb1 \
          libxcomposite1 \
          libxcursor1 \
          libxdamage1 \
          libxext6 \
          libxfixes3 \
          libxi6 \
          libxrandr2 \
          libxrender1 \
          libxss1 \
          libxtst6 \
          ca-certificates \
          fonts-liberation \
          libnss3 \
          lsb-release \
          xdg-utils \
          wget \
          xvfb \
          libgbm1 \
          libdrm2 \
          libxshmfence1

    - name: Install Playwright browsers
      run: |
        python -m playwright install --with-deps ${{ matrix.browser }}
        
    - name: Create directories
      run: |
        mkdir -p logs
        mkdir -p reports
        mkdir -p screenshots

    - name: Upgrade Behave
      run: pip install --upgrade behave    
    - name: Check Behave Version
      run: behave --version    

    - name: Run Smoke Tests
      env:
        BROWSER: ${{ matrix.browser }}
        ENVIRONMENT: dev
        PWTEST_HEADED: "0"
        DISPLAY: ":99.0"
      run: |
        # Ensure reports directory exists
        mkdir -p reports

        # Run tests with multiple formats
        behave --tags="@smoke" -v --format=pretty --format=json -o reports/smoke_results.json

        # Check the JSON file
        echo "Smoke Results JSON File Size:"
        ls -lh reports/smoke_results.json

        echo "Contents of smoke_results.json:"
        cat reports/smoke_results.json

        # Fail if JSON is empty
        if [ ! -s reports/smoke_results.json ]; then
          echo "Smoke results JSON file is empty!"
          exit 1
        fi

    - name: Output Smoke Results JSON
      run: cat reports/smoke_results.json   

    - name: Run P1 Tests
      if: success() || failure()
      env:
        BROWSER: ${{ matrix.browser }}
        ENVIRONMENT: dev
        PWTEST_HEADED: "0"
        DISPLAY: ":99.0"
      run: |
        behave --tags="@p1" -v --format=progress2 --format=json -o reports/p1_results.json
        # Debug: Print contents of the P1 report
        cat reports/p1_results.json

    - name: Run Remaining Tests
      if: success() || failure()
      env:
        BROWSER: ${{ matrix.browser }}
        ENVIRONMENT: dev
        PWTEST_HEADED: "0"
        DISPLAY: ":99.0"
      run: |
        behave --tags="~@smoke and ~@p1" -v --format=progress2 --format=json -o reports/other_results.json
         # Debug: Print contents of the other tests report
        cat reports/other_results.json

    - name: Check Reports Directory
      run: ls -l reports/
    
    - name: Create empty result files if they don't exist
      run: |
        echo '{}' > reports/smoke_results.json
        echo '{}' > reports/p1_results.json
        echo '{}' > reports/other_results.json    
        
    - name: Generate Combined Report
      if: always()
      run: |
        # Install additional reporting tools
        pip install junit2html
        
        # Create empty result files if they don't exist
        echo '{}' > reports/smoke_results.json
        echo '{}' > reports/p1_results.json
        echo '{}' > reports/other_results.json
        
        # Run report generation
        python .github/scripts/combine_reports.py

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          reports/
          logs/
          screenshots/
        retention-days: 30  # How long to retain the artifacts